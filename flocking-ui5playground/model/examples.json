[{
    "name": "Amplitude modulation",
    "group": "Synthesis Techniques",
    "desc": "",
    "link": "http://flockingjs.org/demos/interactive/html/playground.html",
    "code": [
      "// Create a new synth consisting of a sine wave,",
      "// modulating its amplitude slowly with another sine wave.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        id: \"carrier\",",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: 440,",
      "        mul: {",
      "            id: \"mod\",",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: 1.0,",
      "            mul: 0.25",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Frequency modulation",
    "group": "Synthesis Techniques",
    "desc": "",
    "link": "http://flockingjs.org/demos/interactive/html/playground.html",
    "code": [
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sin\",",
      "        freq: {",
      "            ugen: \"flock.ugen.value\",",
      "            rate: \"audio\",",
      "            value: 400,",
      "            add: {",
      "                ugen: \"flock.ugen.sin\",",
      "                freq: {",
      "                    ugen: \"flock.ugen.mouse.cursor\",",
      "                    mul: 124,",
      "                    add: 62,",
      "                },",
      "                mul: {",
      "                    ugen: \"flock.ugen.mouse.cursor\",",
      "                    mul: 100,",
      "                    add: 100,",
      "                    options: {",
      "                        axis: \"y\"",
      "                    }",
      "                }",
      "            }",
      "        },",
      "        mul: 0.3",
      "    }",
      "});"
    ]
  }, {
    "name": "Phase modulation",
    "group": "Synthesis Techniques",
    "desc": "",
    "link": "http://flockingjs.org/demos/interactive/html/playground.html",
    "code": [
      "// Phase modulation with sine waves.",
      "// Demo courtesty of Adam Tindale (http://www.adamtindale.com/).",
      "var synth = flock.synth({",
      "   synthDef: {",
      "       id: \"carrier\",",
      "       ugen: \"flock.ugen.sinOsc\",",
      "       freq: 440,",
      "       phase: {",
      "           id: \"mod\",",
      "           ugen: \"flock.ugen.sinOsc\",",
      "           freq: 34.0,",
      "           mul: {",
      "               ugen: \"flock.ugen.sinOsc\",",
      "               freq: 1/20,",
      "               mul: flock.PI",
      "           },",
      "           add: flock.PI",
      "       },",
      "       mul: 0.25",
      "   }",
      "});"
    ]
  }, {
    "name": "Additive Synthesis",
    "group": "Synthesis Techniques",
    "desc": "",
    "link": "http://flockingjs.org/demos/interactive/html/playground.html",
    "code": [
      "// A bank of oscillators added together.",
      "var harmonics = [1, 3, 5, 7, 11, 13, 15, 17, 19, 21],",
      "    ugenTypes = [\"flock.ugen.sin\", \"flock.ugen.lfSaw\", \"flock.ugen.lfPulse\", \"flock.ugen.lfNoise\"],",
      "    fundamentalMultiplier = 440,",
      "    maxFreq = flock.enviro.shared.audioSettings.rates.audio / 4; // Highest harmonic shouldn't be more than a quarter of the Nyquist frequency.",
      "",
      "var makeHarmonic = function (ugenTypes, fundamental, harmonic, octave, maxAmp) {",
      "    var freqScale = (harmonic * octave),",
      "        ugen = flock.choose(ugenTypes);",
      "",
      "    return {",
      "        ugen: ugen,",
      "        freq: fundamental * freqScale,",
      "        mul: maxAmp / freqScale",
      "    };",
      "};",
      "",
      "var makeHarmonics = function (fundamental) {",
      "    var sources = [],",
      "        freqs = [];",
      "",
      "    $.each(harmonics, function (i, harmonic) {",
      "        var freq = fundamental,",
      "            octave = 1;",
      "",
      "        while (freq <= maxFreq) {",
      "            var ugenDef = makeHarmonic(ugenTypes, fundamental, harmonic, octave, 0.1);",
      "            freq = ugenDef.freq;",
      "            if (freq <= maxFreq && freqs.indexOf(freq) === -1) {",
      "                freqs.push(freq);",
      "                sources.push(ugenDef);",
      "            }",
      "            octave++;",
      "        }",
      "    });",
      "",
      "    return sources;",
      "};",
      "",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        id: \"adder\",",
      "        ugen: \"flock.ugen.sum\",",
      "        sources: makeHarmonics(fundamentalMultiplier)",
      "    }",
      "});",
      "",
      "synth.enviro.asyncScheduler.repeat(0.5, function () {",
      "    var fundamental = (fundamentalMultiplier * Math.random()) + 60;",
      "    synth.input(\"adder.sources\", makeHarmonics(fundamental));",
      "});"
    ]
  }, {
    "name": "Sine",
    "group": "Simple Waveforms",
    "value": "simple_sin",
    "code": [
      "// Simple sine wave oscillator",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: 440,",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "Triangle",
    "group": "Simple Waveforms",
    "value": "simple_triangle",
    "code": [
      "// Triangle oscillator.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.tri\",",
      "        freq: 440",
      "    }",
      "});"
    ]
  }, {
    "name": "Square",
    "group": "Simple Waveforms",
    "value": "simple_square",
    "code": [
      "// And a square wave oscillator.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.square\",",
      "        freq: 440",
      "    }",
      "});"
    ]
  }, {
    "name": "Saw",
    "group": "Simple Waveforms",
    "value": "simple_saw",
    "code": [
      "// And a saw.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.saw\",",
      "        freq: 440",
      "    }",
      "});"
    ]
  }, {
    "name": "White noise",
    "group": "Noise",
    "value": "noise_white",
    "code": [
      "// Filtering white noise with the mouse.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.filter.biquad.bp\",",
      "        source: {",
      "            ugen: \"flock.ugen.whiteNoise\",",
      "            mul: 0.5",
      "        },",
      "        freq: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            mul: 1660,",
      "            add: 40,",
      "            options: {",
      "                interoplation: \"exponential\"",
      "            }",
      "        },",
      "        q: 2.0",
      "    }",
      "});"
    ]
  }, {
    "name": "Pink noise",
    "group": "Noise",
    "value": "noise_pink",
    "code": [
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.pinkNoise\",",
      "        mul: 0.5",
      "    }",
      "});"
    ]
  }, {
    "name": "Dust",
    "group": "Noise",
    "value": "noise_dust",
    "code": [
      "// Simple example of Dust generating random audio noise.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.dust\",",
      "        density: 200,",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "LFNoise",
    "group": "Noise",
    "value": "noise_lf",
    "code": [
      "// LFNoise generating random audio noise.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.lfNoise\",",
      "        freq: 1000,",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "LFNoise &amp; SinOsc",
    "group": "Noise",
    "value": "noise_sin",
    "code": [
      "// LFNoise randomly changing the pitch of a sine",
      "// oscillator every quarter second.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        mul: 0.25,",
      "        freq: {",
      "            ugen: \"flock.ugen.lfNoise\",",
      "            freq: 4,",
      "            mul: 400,",
      "            add: 450",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Impulse",
    "group": "Noise",
    "value": "noise_impulse",
    "code": [
      "// The Impulse ugen's frequency controlled by a descending xLine.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.impulse\",",
      "        freq: {",
      "            ugen: \"flock.ugen.xLine\",",
      "            start: 880,",
      "            end: 2,",
      "            duration: 3.0",
      "        },",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "Impulse Phase Modulation",
    "group": "Noise",
    "value": "impulse_phase",
    "code": [
      "// A stereo pair of Impulses, one being phase modulated with the mouse cursor.",
      "var synth = flock.synth({",
      "    synthDef: [",
      "        {",
      "            ugen: \"flock.ugen.impulse\",",
      "            freq: 4,",
      "            mul: 0.3,",
      "            phase: 0",
      "        },",
      "        {",
      "            ugen: \"flock.ugen.impulse\",",
      "            freq: 4,",
      "            mul: 0.3,",
      "            phase: {",
      "                ugen: \"flock.ugen.mouse.cursor\"",
      "            }",
      "        }",
      "    ]",
      "});"
    ]
  }, {
    "name": "Bandlimited Impulse",
    "group": "Noise",
    "value": "blit",
    "code": [
      "var synth = flock.synth({",
      "    synthDef: [",
      "    // The left channel aliases alias at high frequencies (you'll hear it wobble).",
      "        {",
      "            ugen: \"flock.ugen.impulse\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                start: 10000,",
      "                end: 20,",
      "                duration: 10",
      "            },",
      "            mul: 0.5",
      "        },",
      "        // The right channel is bandlimited, so it does not alias.",
      "        {",
      "            ugen: \"flock.ugen.blit\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                start: 10000,",
      "                end: 20,",
      "                duration: 10",
      "            },",
      "            mul: 0.5",
      "        }",
      "    ]",
      "});"
    ]
  }, {
    "name": "Granulator",
    "group": "Granular Synthesis",
    "value": "granulator",
    "code": [
      "// Granulates a filtered sawtooth wave.",
      "// Demo by Mayank Sanganeria and Adam Tindale.",
      "var synth = flock.synth({",
      "   synthDef: {",
      "       ugen: \"flock.ugen.granulator\",",
      "       numGrains: {",
      "           ugen: \"flock.ugen.line\",",
      "           start: 1,",
      "           end: 40,",
      "           duration: 20",
      "       },",
      "       grainDur: {",
      "           ugen: \"flock.ugen.line\",",
      "           start: 0.1,",
      "           end: 0.005,",
      "           duration: 100",
      "       },",
      "       delayDur: 8,",
      "       mul: 0.5,",
      "       source: {",
      "           ugen: \"flock.ugen.filter.biquad.lp\",",
      "           freq: {",
      "               ugen: \"flock.ugen.sin\",",
      "               rate: \"control\",",
      "               freq: {",
      "                   ugen: \"flock.ugen.xLine\",",
      "                   rate: \"control\",",
      "                   start: 0.7,",
      "                   end: 3000,",
      "                   duration: 60",
      "               },",
      "               phase: 0,",
      "               mul: 2000,",
      "               add: 4000",
      "           },",
      "           source: {",
      "               ugen: \"flock.ugen.lfSaw\",",
      "               freq: {",
      "                   ugen: \"flock.ugen.sin\",",
      "                   freq: 0.1,",
      "                   mul: 1000,",
      "                   add: 3000,",
      "               },",
      "               mul: 0.25",
      "           }",
      "       }",
      "   }",
      "});"
    ]
  }, {
    "name": "Play a buffer",
    "group": "Audio Buffers",
    "value": "playBuffer",
    "code": [
      "// Plays back a sound file in a loop.",
      "// The playback rate is controlled by the mouse cursor's vertical position,",
      "// while the end point in the sound file is determined by the mouse's horizontal position.",
      "// Note: this demo needs to be run from a web server to due to buffer-loading restrictions in most browsers.",
      "",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.playBuffer\",",
      "        buffer: {",
      "            id: \"chord\",",
      "            url: \"../../shared/audio/hillier-first-chord.wav\"",
      "        },",
      "",
      "        speed: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            options: {",
      "                axis: \"y\"",
      "            },",
      "            add: 0.5",
      "        },",
      "",
      "        loop: 1,",
      "",
      "        start: 0,",
      "",
      "        end: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            options: {",
      "                axis: \"x\"",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Trigger buffer playback",
    "group": "Audio Buffers",
    "value": "playBufferTrigger",
    "code": [
      "// Triggers the playback of a sound file from the beginning every time the user clicks the mouse.",
      "// Note: this demo needs to be run from a web server to due to buffer-loading restrictions in most browsers.",
      "",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.playBuffer\",",
      "        buffer: {",
      "            id: \"chord\",",
      "            url: \"../../shared/audio/hillier-first-chord.wav\"",
      "        },",
      "",
      "        trigger: {",
      "            ugen: \"flock.ugen.mouse.click\"",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Read buffer",
    "group": "Audio Buffers",
    "value": "readBuffer",
    "code": [
      "// Modulates the playback rate of a sound file with a sine wave oscillator.",
      "// Note: this demo needs to be run from a web server to due to buffer-loading restrictions in most browsers.",
      "",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.readBuffer\",",
      "        buffer: {",
      "            id: \"chord\",",
      "            url: \"../../shared/audio/hillier-first-chord.wav\"",
      "        },",
      "        phase: {",
      "            ugen: \"flock.ugen.sin\",",
      "            freq: 1/5,",
      "            mul: 0.5,",
      "            add: 0.5",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Read buffer with phasor",
    "group": "Audio Buffers",
    "value": "readBufferPhasor",
    "code": [
      "// Plays back a sound file while the user holds down the mouse button.",
      "// If the user lets go of the mouse and clicks it again, playback will resume at its previous location.",
      "// Uses a phasor and the bufferPhaseStep unit generator to play back the sound at its normal rate.",
      "// Note: this demo needs to be run from a web server to due to buffer-loading restrictions in most browsers.",
      "",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.readBuffer\",",
      "        buffer: {",
      "            id: \"chord\",",
      "            url: \"../../shared/audio/hillier-first-chord.wav\"",
      "        },",
      "        phase: {",
      "            rate: \"audio\",",
      "            ugen: \"flock.ugen.phasor\",",
      "            step: {",
      "                ugen: \"flock.ugen.mouse.click\",",
      "                mul: {",
      "                    ugen: \"flock.ugen.bufferPhaseStep\",",
      "                    buffer: \"chord\"",
      "                }",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Live audio input",
    "group": "Audio Buffers",
    "value": "audioIn",
    "code": [
      "// Plays back live audio from the microphone.",
      "// Wear headphones to prevent feedback.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.audioIn\",",
      "        bus: flock.enviro.shared.audioSettings.chans",
      "    }",
      "});"
    ]
  }, {
    "name": "Granulated live audio",
    "group": "Audio Buffers",
    "value": "granulatedAudioIn",
    "code": [
      "// Granulates live audio from the microphone.",
      "// Wear headphones to prevent feedback.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.granulator\",",
      "        delayDur: 0.25,",
      "        numGrains: {",
      "            ugen: \"flock.ugen.lfNoise\",",
      "            freq: 0.5,",
      "            mul: 75,",
      "            add: 75,",
      "            options: {",
      "                interpolation: \"linear\"",
      "            }",
      "        },",
      "        source: {",
      "            ugen: \"flock.ugen.audioIn\"",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Low pass filter",
    "group": "Filters",
    "value": "lowpass",
    "code": [
      "// This example needs to be run from a web server.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.filter.biquad.lp\",",
      "        freq: {",
      "            ugen: \"flock.ugen.sin\",",
      "            rate: \"control\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                rate: \"control\",",
      "                start: 0.7,",
      "                end: 300,",
      "                duration: 20",
      "            },",
      "            phase: 0,",
      "            mul: 3600,",
      "            add: 4000",
      "        },",
      "        source: {",
      "            ugen: \"flock.ugen.lfSaw\",",
      "            freq: 200,",
      "            mul: 0.1",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "High pass filter",
    "group": "Filters",
    "value": "highpass",
    "code": [
      "// This example needs to be run from a web server.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.filter.biquad.hp\",",
      "        freq: {",
      "            ugen: \"flock.ugen.sin\",",
      "            rate: \"control\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                rate: \"control\",",
      "                start: 0.7,",
      "                end: 300,",
      "                duration: 20",
      "            },",
      "            phase: 0,",
      "            mul: 3600,",
      "            add: 4000",
      "        },",
      "        source: {",
      "            ugen: \"flock.ugen.lfSaw\",",
      "            freq: 200,",
      "            mul: 0.1",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Band pass filter",
    "group": "Filters",
    "value": "bandpass",
    "code": [
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.filter.biquad.bp\",",
      "        freq: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            options: {",
      "                interpolation: \"exponential\"",
      "            },",
      "            mul: 10000,",
      "            add: 100,",
      "            lag: 1",
      "        },",
      "        q: 3.0,",
      "        source: {",
      "            ugen: \"flock.ugen.lfSaw\",",
      "            freq: 200,",
      "            mul: 0.1",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Band reject filter",
    "group": "Filters",
    "value": "bandreject",
    "code": [
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.filter.biquad.br\",",
      "        freq: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            options: {",
      "                interpolation: \"exponential\"",
      "            },",
      "            mul: 10000,",
      "            add: 100,",
      "            lag: 1",
      "        },",
      "        q: 3.0,",
      "        source: {",
      "            ugen: \"flock.ugen.lfSaw\",",
      "            freq: 200,",
      "            mul: 0.1",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Delay",
    "group": "Filters",
    "value": "delay",
    "code": [
      "// Use Dust to trigger the Delay unit generator as an envelope for a Decaying WhiteNoise source",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.delay\",",
      "        source: {",
      "            ugen: \"flock.ugen.decay\",",
      "            source: {",
      "                ugen: \"flock.ugen.dust\",",
      "                density: 1.0,",
      "                mul: 0.5",
      "            },",
      "            time: 0.3,",
      "            mul: {",
      "                ugen: \"flock.ugen.whiteNoise\"",
      "            }",
      "        },",
      "        maxTime: 1.0,",
      "        time: 0.2,",
      "        add: {",
      "            ugen: \"flock.ugen.decay\",",
      "            source: {",
      "                ugen: \"flock.ugen.dust\",",
      "                density: 1.0,",
      "                mul: 0.5",
      "            },",
      "            time: 0.3,",
      "            mul: {",
      "                ugen: \"flock.ugen.whiteNoise\"",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Sample and Hold",
    "group": "Filters",
    "value": "latch",
    "code": [
      "/*",
      "  David Michael Cottle's first Latch example from http://www.mat.ucsb.edu/275/CottleSC3.pdf",
      " \"The patterns that emerge are more varied than a single sequence, but more cohesive than an LFNoise control.",
      "  Try the example below and listen for the shape of the Saw wave in the frequencies.",
      "  In this patch I change the frequency of the wave being sampled.",
      "  I use a MouseX.kr to control the frequency of the sampled LFSaw.",
      "  It begins at 0.1, or once every ten seconds and then moves to 20.",
      "  When the mouse is at the left of the screen you should hear the shape of the wave in the resulting frequency control.",
      "  As you move to the right, you are essentially shortening the sampled wave in relation to the sample rate,",
      "  and the smooth ramp will begin to disappear, but there will always be a pattern\" (Cottle 168).\"",
      "*/",
      "",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sin\",",
      "        mul: 0.3,",
      "        freq: {",
      "            ugen: \"flock.ugen.latch\",",
      "            rate: \"control\",",
      "            source: {",
      "                ugen: \"flock.ugen.lfSaw\",",
      "                freq: {",
      "                    ugen: \"flock.ugen.mouse.cursor\",",
      "                    rate: \"control\",",
      "                    mul: 18.9,",
      "                    add: 1.1",
      "                },",
      "                mul: 500,",
      "                add: 600",
      "            },",
      "            trigger: {",
      "                ugen: \"flock.ugen.impulse\",",
      "                rate: \"control\",",
      "                freq: 10",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Moog VCF",
    "group": "Filters",
    "value": "moog",
    "code": [
      "// A 24db low pass moog-style filter.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.filter.moog\",",
      "        cutoff: {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: 1/4,",
      "            mul: 5000,",
      "            add: 7000",
      "        },",
      "        resonance: {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: 1/2,",
      "            mul: 1.5,",
      "            add: 1.5",
      "        },",
      "        source: {",
      "            ugen: \"flock.ugen.lfSaw\",",
      "            freq: {",
      "                ugen: \"flock.ugen.sequence\",",
      "                freq: 1/2,",
      "                loop: 1,",
      "                list: [220, 220 * 5/4, 220, 220 * 3/2, 220 * 4/3, 220],",
      "                options: {",
      "                    interpolation: \"linear\"",
      "                }",
      "            }",
      "        },",
      "        mul: 0.5",
      "    }",
      "});"
    ]
  }, {
    "name": "Attack/Sustain/Release",
    "group": "Envelopes",
    "value": "asr",
    "code": [
      "// Sine tone shaped by a simple attack/sustain/release envelope and periodically triggered.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: 440,",
      "        mul: {",
      "            ugen: \"flock.ugen.asr\",",
      "            start: 0.0,",
      "            attack: 0.25,",
      "            sustain: 0.25,",
      "            release: 1.0,",
      "            gate: {",
      "                ugen: \"flock.ugen.impulse\",",
      "                rate: \"control\",",
      "                freq: 0.75,",
      "                phase: 1.0",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "ADSR Envelope Generator",
    "group": "Envelopes",
    "value": "adsr_envGen",
    "code": [
      "// Multiple harmonics, each with their own ADSR envelope.",
      "// The envelope generator's gate is opens whenever the mouse button is held down.",
      "flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sum\",",
      "        sources: [",
      "            {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: 440,",
      "                mul: {",
      "                    ugen: \"flock.ugen.envGen\",",
      "                    envelope: {",
      "                        type: \"flock.envelope.adsr\",",
      "                        attack: 1.0,",
      "                        decay: 0.5,",
      "                        peak: 0.15,",
      "                        sutain: 0.1,",
      "                        release: 1.0",
      "                    },",
      "                    gate: {",
      "                        ugen: \"flock.ugen.mouse.click\"",
      "                    }",
      "                }",
      "            },",
      "            {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: 440 * 2/1,",
      "                mul: {",
      "                    ugen: \"flock.ugen.envGen\",",
      "                    envelope: {",
      "                        type: \"flock.envelope.adsr\",",
      "                        attack: 1.0 * 2/1,",
      "                        decay: 0.5 * 2/1,",
      "                        peak: 0.15,",
      "                        sustain: 0.1,",
      "                        release: 1.0 * 2/1",
      "                    },",
      "                    gate: {",
      "                        ugen: \"flock.ugen.mouse.click\"",
      "                    }",
      "                }",
      "            },",
      "            {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: 440 * 3/2,",
      "                mul: {",
      "                    ugen: \"flock.ugen.envGen\",",
      "                    envelope: {",
      "                        type: \"flock.envelope.adsr\",",
      "                        attack: 1.0 * 3/2,",
      "                        decay: 0.5 * 3/2,",
      "                        peak: 0.15,",
      "                        sustain: 0.1,",
      "                        release: 1.0 * 3/2",
      "                    },",
      "                    gate: {",
      "                        ugen: \"flock.ugen.mouse.click\"",
      "                    }",
      "                }",
      "            },",
      "            {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: 440 * 4/3,",
      "                mul: {",
      "                    ugen: \"flock.ugen.envGen\",",
      "                    envelope: {",
      "                        type: \"flock.envelope.adsr\",",
      "                        attack: 1.0 * 4/3,",
      "                        decay: 0.5 * 4/3,",
      "                        peak: 0.15,",
      "                        sustain: 0.1,",
      "                        release: 1.0 * 4/3",
      "                    },",
      "                    gate: {",
      "                        ugen: \"flock.ugen.mouse.click\"",
      "                    }",
      "                }",
      "            },",
      "            {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: 440 * 5/4,",
      "                mul: {",
      "                    ugen: \"flock.ugen.envGen\",",
      "                    envelope: {",
      "                        type: \"flock.envelope.adsr\",",
      "                        attack: 1.0 * 5/4,",
      "                        decay: 0.5 * 5/4,",
      "                        peak: 0.15,",
      "                        sustain: 0.1,",
      "                        release: 1.0 * 5/4",
      "                    },",
      "                    gate: {",
      "                        ugen: \"flock.ugen.mouse.click\"",
      "                    }",
      "                }",
      "            },",
      "            {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: 440 * 7/6,",
      "                mul: {",
      "                    ugen: \"flock.ugen.envGen\",",
      "                    envelope: {",
      "                        type: \"flock.envelope.adsr\",",
      "                        attack: 1.0 * 7/6,",
      "                        decay: 0.5 * 7/6,",
      "                        peak: 0.15,",
      "                        sustain: 0.1,",
      "                        release: 1.0 * 7/6",
      "                    },",
      "                    gate: {",
      "                        ugen: \"flock.ugen.mouse.click\"",
      "                    }",
      "                }",
      "            }",
      "        ]",
      "    }",
      "});"
    ]
  }, {
    "name": "Custom Envelope",
    "group": "Envelopes",
    "value": "custom_envGen",
    "code": [
      "var customEnvelope = {",
      "    levels: [0, 1, 0.4, 1.0, 0.6, 0],",
      "    times: [0.5, 0.3, 0.5, 0.3, 0.5],",
      "    curve: [\"sin\", \"exponential\", \"linear\", \"welsh\", 3]",
      "};",
      "",
      "var gateDef = {",
      "    ugen: \"flock.ugen.lfPulse\",",
      "    rate: \"control\",",
      "    freq: 0.39,",
      "    width: 0.5",
      "};",
      "",
      "flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: 270,",
      "        phase: {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: {",
      "                ugen: \"flock.ugen.envGen\",",
      "                rate: \"control\",",
      "                envelope: customEnvelope,",
      "                mul: 473,",
      "                gate: gateDef",
      "            }",
      "        },",
      "        mul: {",
      "            ugen: \"flock.ugen.envGen\",",
      "            rate: \"control\",",
      "            envelope: customEnvelope,",
      "            mul: 0.5,",
      "            gate: gateDef",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "For Ann (Rising) by James Tenney",
    "group": "Envelopes",
    "value": "forAnn",
    "code": [
      "// James Tenney's For Ann (Rising).",
      "flock.init({",
      "    bufferSize: 8192",
      "});",
      "",
      "var sked = flock.enviro.shared.asyncScheduler,",
      "    numSynths = 240,",
      "    synths = [],",
      "  nextSynthIdx = 0,",
      "  synthToRemoveIdx = 0;",
      "",
      "var forAnnSynthDef = {",
      "    ugen: \"flock.ugen.sinOsc\",",
      "    freq: {",
      "        ugen: \"flock.ugen.envGen\",",
      "        envelope: {",
      "            levels: [40, 10240],",
      "            times: [33.6],",
      "            curve: \"exponential\"",
      "        },",
      "        gate: 1.0",
      "    },",
      "    mul: {",
      "        ugen: \"flock.ugen.envGen\",",
      "        envelope: {",
      "            type: \"flock.envelope.linear\",",
      "            attack: 8.4,",
      "            sustain: 16.8,",
      "            release: 8.4",
      "        },",
      "        gate: 1.0,",
      "        mul: 0.1",
      "    }",
      "};",
      "",
      "// To save cycles during performance,",
      "// create all the voices ahead of time.",
      "for (var i = 0; i < numSynths; i++) {",
      "    var synth = flock.synth({",
      "        synthDef: forAnnSynthDef,",
      "        addToEnvironment: false",
      "    });",
      "",
      "    synths[i] = synth;",
      "}",
      "",
      "// Use the scheduler to start a new synth playing",
      "// every 2.8 seconds.",
      "var adder = sked.repeat(2.8, function () {",
      "    var synth = synths[nextSynthIdx];",
      "    flock.enviro.shared.tail(synth);",
      "",
      "    nextSynthIdx++;",
      "    if (nextSynthIdx >= numSynths) {",
      "        sked.clear(adder);",
      "    }",
      "});",
      "",
      "// Remove each synth after its envelope has reached its target.",
      "// (Flocking doesn't yet have \"done actions\" like in SuperCollider).",
      "sked.repeat(34, function () {",
      "    var synth = synths[synthToRemoveIdx];",
      "",
      "    // Destroying a synth will remove it from the environment as well,",
      "    // but means that it can't be reused later.",
      "    synth.destroy();",
      "",
      "    synthToRemoveIdx++;",
      "    if (synthToRemoveIdx >= numSynths) {",
      "        sked.clearAll();",
      "    }",
      "});"
    ]
  }, {
    "name": "Decay",
    "group": "Envelopes",
    "value": "decay",
    "code": [
      "// Decay as an envelope for white noise.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.decay\",",
      "        source: {",
      "            ugen: \"flock.ugen.impulse\",",
      "            rate: \"audio\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                rate: \"control\",",
      "                start: 1,",
      "                end: 50,",
      "                duration: 20",
      "            },",
      "            phase: 0.25,",
      "            mul: 0.25",
      "        },",
      "        time: 0.2,",
      "        mul: {",
      "            ugen: \"flock.ugen.whiteNoise\"",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "SinOsc Freq",
    "group": "Envelopes",
    "value": "line_freq",
    "code": [
      "// An ascending sinOsc glissando using a line ugen.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: {",
      "            ugen: \"flock.ugen.xLine\",",
      "            rate: \"control\",",
      "            duration: 1.0,",
      "            start: 2000,",
      "            end: 200",
      "        },",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "Mod SinOsc Freq",
    "group": "Envelopes",
    "value": "line_mod",
    "code": [
      "//Line w/ Modulated SinOsc Freq",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                rate: \"control\",",
      "                start: 1,",
      "                end: 1000,",
      "                duration: 9",
      "            },",
      "            mul: 200,",
      "            add: 800",
      "        },",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "SinOsc Phase",
    "group": "Envelopes",
    "value": "line_phase",
    "code": [
      "// Line modulating the phase of a sine oscillator.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: 800,",
      "        phase: {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                rate: \"control\",",
      "                start: 1,",
      "                end: 1000,",
      "                duration: 9",
      "            },",
      "            mul: flock.TWOPI",
      "        },",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "Trigger a callback",
    "group": "Triggers",
    "value": "triggerCallback",
    "code": [
      "// Periodically trigger a function that causes the scope area to shake.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.triggerCallback\",",
      "        trigger: {",
      "            ugen: \"flock.ugen.impulse\",",
      "            freq: 0.75,",
      "            phase: 0.5",
      "        },",
      "        options: {",
      "            callback: {",
      "                func: function () {",
      "                    $(\"#gfx\").toggleClass(\"shake\");",
      "                }",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Scope",
    "group": "DOM UGens",
    "value": "scope",
    "code": [
      "// Dynamic scope: create a synth with a scope ugen",
      "//at the end of the ugen graph.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.scope\",",
      "        source: {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: 440,",
      "            mul: 0.25",
      "        },",
      "        options: {",
      "            canvas: \"#gfx\",",
      "            styles: {",
      "                strokeColor: \"#777777\",",
      "                strokeWidth: 2",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Mouse X",
    "group": "DOM UGens",
    "value": "mouse_x",
    "code": [
      "// Tracks the mouse's horizonal movement across the window.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            rate: \"control\",",
      "            mul: 880,",
      "            add: 110",
      "        },",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "Mouse Y",
    "group": "DOM UGens",
    "value": "mouse_y",
    "code": [
      "// Tracks the mouse's vertical movement across the window.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            rate: \"control\",",
      "            mul: 880,",
      "            add: 110,",
      "            options: {",
      "                axis: \"y\"",
      "            }",
      "        },",
      "        mul: 0.25",
      "    }",
      "});"
    ]
  }, {
    "name": "Mouse X &amp; Y",
    "group": "DOM UGens",
    "value": "mouse_xy",
    "code": [
      "// Tracks the mouse's vertical and horizontal movement within the editor area only.",
      "// Maps y position to amplitude and its x position to pitch.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            rate: \"control\",",
      "            mul: 880,",
      "            add: 110,",
      "            options: {",
      "                axis: \"width\",",
      "                interpolation: \"exponential\",",
      "                target: \".CodeMirror\"",
      "            }",
      "        },",
      "        mul: {",
      "            ugen: \"flock.ugen.mouse.cursor\",",
      "            rate: \"control\",",
      "            options: {",
      "                axis: \"height\",",
      "                target: \".CodeMirror\"",
      "            },",
      "            mul: 0.5",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Mouse click",
    "group": "DOM UGens",
    "value": "mouse_click",
    "code": [
      "// Triggers a note whenever the mouse is clicked.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.sinOsc\",",
      "        freq: 440,",
      "        mul: {",
      "            ugen: \"flock.ugen.asr\",",
      "            attack: 0.25,",
      "            sustain: 0.25,",
      "            release: 0.5,",
      "            gate: {",
      "                ugen: \"flock.ugen.mouse.click\"",
      "            }",
      "        }",
      "    }",
      "});"
    ]
  }, {
    "name": "Stereo",
    "group": "Multiple Channels",
    "value": "stereo",
    "code": [
      "// Create a synth with two different channels.",
      "// The left and the right channels are both sine waves,",
      "// but slightly apart in frequency.",
      "// This creates a stereo beating effect.",
      "var synth = flock.synth({",
      "    synthDef: [",
      "        {",
      "            id: \"leftSine\",",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: 440,",
      "            mul: 0.25",
      "        },",
      "        {",
      "            id: \"rightSine\",",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: 444,",
      "            mul: 0.25",
      "        }",
      "    ]",
      "});"
    ]
  }, {
    "name": "Four channels",
    "group": "Multiple Channels",
    "value": "quad",
    "code": [
      "// Four separate channels of sound.",
      "// This demo requires a sound interface with at least four channels,otherwise you 'll only hear the first two.",
      "// At the moment, Firefox and Safari don't support more than two channels, so try this with Chrome.",
      "flock.init({",
      "    chans: 4",
      "});",
      "",
      "var synth = flock.synth({",
      "    synthDef: [",
      "        {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                start: 60,",
      "                end: 90,",
      "                duration: 120",
      "            },",
      "            mul: {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: {",
      "                    ugen: \"flock.ugen.xLine\",",
      "                    start: 1/120,",
      "                    end: 1/2,",
      "                    duration: 120",
      "                },",
      "                mul: 0.125,",
      "                add: 0.125",
      "            }",
      "        },",
      "        {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                start: 90,",
      "                end: 60,",
      "                duration: 90",
      "            },",
      "            mul: {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: {",
      "                    ugen: \"flock.ugen.lfNoise\",",
      "                    freq: {",
      "                        ugen: \"flock.ugen.xLine\",",
      "                        start: 1/240,",
      "                        end: 1/120,",
      "                        duration: 90",
      "                    },",
      "                    mul: 1/30,",
      "                    add: 1/30",
      "                },",
      "                mul: 0.125,",
      "                add: 0.125",
      "            }",
      "        },",
      "        {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                start: 270,",
      "                end: 240,",
      "                duration: 120",
      "            },",
      "            mul: {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: {",
      "                    ugen: \"flock.ugen.xLine\",",
      "                    start: 1/120,",
      "                    end: 1/2,",
      "                    duration: 120",
      "                },",
      "                mul: 0.125,",
      "                add: 0.125",
      "            }",
      "        },",
      "        {",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: {",
      "                ugen: \"flock.ugen.xLine\",",
      "                start: 210,",
      "                end: 180,",
      "                duration: 90",
      "            },",
      "            mul: {",
      "                ugen: \"flock.ugen.sinOsc\",",
      "                freq: {",
      "                    ugen: \"flock.ugen.lfNoise\",",
      "                    freq: {",
      "                        ugen: \"flock.ugen.xLine\",",
      "                        start: 1/240,",
      "                        end: 1/120,",
      "                        duration: 180",
      "                    },",
      "                    mul: 1/60,",
      "                    add: 1/60",
      "                },",
      "                mul: 0.125,",
      "                add: 0.125",
      "            }",
      "        }",
      "    ]",
      "});"
    ]
  }, {
    "name": "Multiple synths",
    "group": "Synths and Scheduling",
    "value": "multipleSynths",
    "code": [
      "/*",
      " * Multiple synths playing back simultaneously, playing shifting chords.",
      " */",
      "",
      "// Creates an array of synths, each playing a degree of the chord specified in \"intervals.\"",
      "function makeIntervallicSynths (fundamental, intervals) {",
      "    var ampScale = 0.4 / intervals.length;",
      "    return $.map(intervals, function (interval, idx) {",
      "        return flock.synth({",
      "            synthDef: {",
      "                id: \"carrier\",",
      "                ugen: \"flock.ugen.sin\",",
      "                freq: fundamental * interval,",
      "                mul: ampScale",
      "            }",
      "        });",
      "    });",
      "}",
      "",
      "var fundamental = 440,",
      "    baseIntervals = [1/1, 5/4, 3/2],",
      "    weightedIntervals = baseIntervals.concat([4/3, 6/5, 7/6, 2/1]).concat(baseIntervals),",
      "    synths = makeIntervallicSynths(fundamental, baseIntervals),",
      "    synth = synths[0],",
      "    clock = flock.scheduler.async.tempo({",
      "        bpm: 60",
      "    });",
      "",
      "// Every second, change one of the intervals by randomly choosing a synth",
      "// and assigning it a new frequency from the list of intervals.",
      "clock.repeat(1, function () {",
      "    var intervalSynth = flock.choose(synths),",
      "        newInterval = flock.choose(weightedIntervals);",
      "    intervalSynth.input(\"carrier.freq\", fundamental * newInterval);",
      "});"
    ]
  }, {
    "name": "Polyphonic synth",
    "group": "Synths and Scheduling",
    "value": "polyphonicSynth",
    "code": [
      "var fundamental = 440;",
      "",
      "var polySynth = flock.synth.polyphonic({",
      "    synthDef: {",
      "        id: \"carrier\",",
      "        ugen: \"flock.ugen.sin\",",
      "        freq: fundamental,",
      "        mul: {",
      "            id: \"env\",",
      "            ugen: \"flock.ugen.asr\",",
      "            attack: 0.25,",
      "            sustain: 1.0,",
      "            release: 0.5",
      "        }",
      "    }",
      "});",
      "",
      "var score = [",
      "    {",
      "        action: \"noteOn\",",
      "        noteName: \"root\",",
      "        change: {",
      "            \"carrier.freq\": fundamental",
      "        }",
      "    },",
      "",
      "    {",
      "        action: \"noteOn\",",
      "        noteName: \"mediant\",",
      "        change: {",
      "            \"carrier.freq\": fundamental * 5/4",
      "        }",
      "    },",
      "",
      "    {",
      "        action: \"noteOn\",",
      "        noteName: \"dominant\",",
      "        change: {",
      "            \"carrier.freq\": fundamental * 3/2",
      "        }",
      "    },",
      "",
      "    {",
      "        action: \"noteOff\",",
      "        noteName: \"root\"",
      "    },",
      "",
      "    {",
      "        action: \"noteOff\",",
      "        noteName: \"mediant\"",
      "    },",
      "",
      "    {",
      "        action: \"noteOff\",",
      "        noteName: \"dominant\"",
      "    }",
      "];",
      "",
      "var clock = flock.scheduler.async();",
      "",
      "var idx = 0;",
      "clock.repeat(0.5, function () {",
      "    if (idx >= score.length) {",
      "        idx = 0;",
      "    }",
      "    var event = score[idx];",
      "    polySynth[event.action](event.noteName, event.change);",
      "    idx++;",
      "});"
    ]
  }, {
    "name": "Declarative scheduling",
    "group": "Synths and Scheduling",
    "value": "declarativeScheduling",
    "code": [
      "// Frequency Stair Stepping Demo",
      "var clock = flock.enviro.shared.asyncScheduler,",
      "    synth = flock.synth({",
      "        nickName: \"sin-synth\",",
      "        synthDef: {",
      "            id: \"carrier\",",
      "            ugen: \"flock.ugen.sinOsc\",",
      "            freq: 220,",
      "            mul: {",
      "                ugen: \"flock.ugen.line\",",
      "                start: 0,",
      "                end: 0.25,",
      "                duration: 1.0",
      "            }",
      "        }",
      "    });",
      "",
      "clock.schedule([",
      "    {",
      "        interval: \"repeat\",",
      "        time: 1.0,",
      "        change: {",
      "            synth: \"sin-synth\",",
      "            values: {",
      "                \"carrier.freq\": {",
      "                    synthDef: {",
      "                        ugen: \"flock.ugen.sequence\",",
      "                        list: [330, 440, 550, 660, 880, 990, 1100, 1210]",
      "                    }",
      "                }",
      "            }",
      "        }",
      "    },",
      "",
      "    {",
      "        interval: \"once\",",
      "        time: 8,",
      "        change: {",
      "            synth: \"sin-synth\",",
      "            values: {",
      "                \"carrier.mul.start\": 0.25,",
      "                \"carrier.mul.end\": 0.0,",
      "                \"carrier.mul.duration\": 1.0",
      "            }",
      "        }",
      "    }",
      "]);"
    ]
  }, {
    "name": "Sample-accurate scheduling",
    "group": "Synths and Scheduling",
    "value": "sampleAccurateScheduling",
    "code": [
      "// Schedules a series of input changes.",
      "// Composition by Colin Clark.",
      "var synth = flock.synth({",
      "    synthDef: {",
      "        ugen: \"flock.ugen.out\",",
      "        sources: {",
      "            ugen: \"flock.ugen.change\",",
      "            initial: {",
      "                ugen: \"flock.ugen.sin\",",
      "                freq: {",
      "                    ugen: \"flock.ugen.xLine\",",
      "                    start: 211,",
      "                    end: 200,",
      "                    duration: 1",
      "                }",
      "            },",
      "            target: {",
      "                ugen: \"flock.ugen.change\",",
      "                initial: {",
      "                    ugen: \"flock.ugen.lfSaw\",",
      "                    freq:  {",
      "                        ugen: \"flock.ugen.xLine\",",
      "                        start: 200,",
      "                        end: 90,",
      "                        duration: 30",
      "                    },",
      "                    mul: 1.0",
      "                },",
      "                target: {",
      "                    ugen: \"flock.ugen.change\",",
      "                    initial: {",
      "                        ugen: \"flock.ugen.sin\",",
      "                        freq: {",
      "                            ugen: \"flock.ugen.xLine\",",
      "                            start: 200,",
      "                            end: 211,",
      "                            duration: 30",
      "                        }",
      "                    },",
      "                    target: {",
      "                        ugen: \"flock.ugen.sin\",",
      "                        freq: {",
      "                            ugen: \"flock.ugen.change\",",
      "                            initial: {",
      "                                ugen: \"flock.ugen.sin\",",
      "                                freq: 200,",
      "                                mul: 111",
      "                            },",
      "                            target: {",
      "                                ugen: \"flock.ugen.xLine\",",
      "                                start: 200,",
      "                                end: 211,",
      "                                duration: 45",
      "                            },",
      "                            time: 35,",
      "                            crossfade: 10",
      "                        },",
      "                        mul: {",
      "                            ugen: \"flock.ugen.line\",",
      "                            start: 1.0,",
      "                            end: 0.0,",
      "                            duration: 47.5",
      "                        }",
      "                    },",
      "                    time: 25,",
      "                    crossfade: 20",
      "                }",
      "            },",
      "            time: 2.0,",
      "            crossfade: 15.0",
      "        }",
      "    }",
      "});"
  ]
}]
